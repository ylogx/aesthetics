# -*- coding: utf-8 -*-
from unittest import TestCase
from aesthetics.fisher import FisherVector
from aesthetics.fisher import Gmm
from aesthetics.fisher import Descriptors
from eyeqscore.combined.mapr.job import data_folder_in_mrjob
filename = 'simple.jpeg'

x = [[ 135.13398743],
     [  88.86602783]]

y = [[  1889.39013672,    686.92218018,    786.9798584,    1059.56616211,
        3086.40234375,    728.10516357,    983.0692749,    1191.2989502,
        9288.29199219,   1741.21875,       778.97668457,    726.19189453,
        1826.37866211,   1132.12988281,   1252.01550293,   1906.5949707,
        17599.48046875,   2238.06958008,    363.0083313,     208.07385254,
        1263.29174805,    740.95910645,   2261.89550781,   5570.26855469,
        4772.41259766,    650.6539917,     459.98703003,   1018.98754883,
        7872.44335938,   1746.60095215,   3072.16796875,   1988.38916016,
        3075.26342773,    824.12518311,    367.04040527,    981.40875244,
        3769.08325195,   1234.62573242,    874.19775391,   1569.3079834,
        13433.01953125,   1844.90869141,    601.13476562,   1161.21838379,
        3350.72363281,   1844.26464844,    821.02789307,   1588.50915527,
        20653.08203125,   3181.7043457,     336.01605225,    327.01660156,
        2014.29504395,    619.06433105,    886.97692871,   4521.27539062,
        6442.48242188,    624.83331299,    173.99700928,   1454.98535156,
        9621.30273438,   1733.54821777,   2007.22070312,   1453.55053711,
        3353.17333984,   1425.89465332,    737.00384521,   1048.33520508,
        3721.69604492,    861.69702148,    368.09423828,   1288.28833008,
        13298.44238281,   1595.74084473,    584.14672852,   1284.17578125,
        3339.45800781,   2113.27832031,    961.0524292,    1954.55554199,
        20578.24414062,   4499.34423828,    946.01055908,    515.9979248,
        2108.23876953,    558.30010986,    492.00537109,   3477.61743164,
        6293.42822266,   1763.9744873,    2233.99072266,   2160.51660156,
        9730.49511719,   1380.40551758,    163.23971558,    478.41455078,
        2597.15185547,   1290.97509766,    764.99963379,    742.30975342,
        2949.31860352,    875.24145508,    565.01647949,    748.23596191,
        9552.57714844,   1982.0378418,    1241.02783203,    989.01165771,
        2263.30908203,    839.29547119,    495.01184082,   1446.84460449,
        17093.7890625,    5017.96972656,   2682.0637207,     911.40039062,
        1670.52307129,    262.08425903,    230.99615479,   2299.11914062,
        4343.30859375,   2058.09375,      3235.04467773,   2070.41113281,
        8295.65820312,    898.46032715,    266.01077271,    504.33917236],
     [  2892.60986328,   1303.07775879,   1277.0201416,    2045.43383789,
        3445.59765625,    928.89483643,    246.93066406,    691.70111084,
        9449.70703125,   3025.78125,      1263.02331543,   1402.80822754,
        1461.62133789,    343.87017822,    617.98455811,   1834.40490723,
        4534.52294922,   1325.93029785,   1015.99163818,   1231.92614746,
        3136.70825195,    833.04089355,   1446.10437012,   1372.73168945,
        1467.58691406,    971.3460083,     666.01293945,    760.01239014,
        2153.55761719,   1405.39929199,   1621.83203125,   1013.61083984,
        3371.73681641,   1250.87475586,   1318.95959473,   2608.59106445,
        4293.91748047,   1453.37414551,    721.80224609,    804.6920166,
        12019.97851562,   2893.09106445,    845.86523438,   1120.78161621,
        1319.27636719,    460.7354126,    1273.97216797,   3659.49072266,
        6555.91992188,   1182.29577637,    868.98394775,   1658.98327637,
        4050.70532227,   1904.93554688,   2402.02319336,   2311.72412109,
        2925.51757812,   1241.16662598,    708.00299072,   1063.01489258,
        2781.69726562,   1671.45178223,   1424.77929688,   1250.44946289,
        3199.82641602,    698.10522461,    736.99615479,   1853.66467285,
        4361.30419922,   2040.30297852,   1330.90576172,   1352.71166992,
        12409.55761719,   3415.2590332,     919.85327148,    532.82421875,
        1143.54199219,    781.72180176,    887.9475708,    3235.4440918,
        6466.75976562,   2108.65625,      1835.98937988,   1838.00195312,
        4399.76171875,   2017.6998291,     874.99462891,   1049.38244629,
        3053.57202148,   1613.0255127,    1450.00952148,   1208.48339844,
        2628.50439453,   1270.59460449,    762.76025391,    809.58538818,
        2806.84814453,    650.02484131,    359.00033569,   1004.69024658,
        3284.68115234,   1576.75854492,   1386.98364258,   1231.76391602,
        9503.42089844,   1824.9621582,     665.97216797,    276.9883728,
        920.69104004,    982.70452881,   1357.98815918,   3048.1550293,
        4322.21044922,   1454.02990723,   1541.9362793,     914.59960938,
        3284.47705078,   1178.91577148,   1091.00390625,   1103.8807373,
        1847.69213867,    862.90625,      1560.95544434,   1235.58911133,
        1961.34301758,    776.53967285,    986.98925781,    802.66082764]]

z = [[  1.71463859e+05,   2.42482422e+04,   7.01669531e+04,   8.40311719e+04,
        2.89897500e+05,   1.86643594e+04,   7.15373438e+04,   8.24282266e+04,
        8.98010438e+05,   1.18809969e+05,   7.04179062e+04,   5.15531367e+04,
        1.53400016e+05,   5.84990352e+04,   1.00530008e+05,   5.95285742e+04,
        2.73550775e+06,   1.07881148e+05,   2.25231211e+04,   1.75304358e+03,
        3.72295117e+04,   3.74759688e+04,   1.99967766e+05,   5.37711062e+05,
        3.14369156e+05,   2.00735312e+04,   3.09508828e+04,   3.27107773e+04,
        1.06302262e+06,   8.75236172e+04,   3.88196062e+05,   1.31516062e+05,
        3.17713094e+05,   3.66859453e+04,   1.17606416e+04,   6.84378672e+04,
        3.76837500e+05,   6.46122656e+04,   6.12725820e+04,   1.03039469e+05,
        1.55188075e+06,   6.72381875e+04,   3.33811328e+04,   6.55997656e+04,
        3.31665406e+05,   1.42741250e+05,   3.29906016e+04,   3.64592188e+04,
        3.25874300e+06,   1.54435859e+05,   1.47320156e+04,   3.76703882e+03,
        7.79377969e+04,   1.53800576e+04,   3.74324648e+04,   3.75650312e+05,
        4.63674281e+05,   9.20573730e+03,   3.11799170e+03,   5.62268516e+04,
        1.33740762e+06,   8.79606484e+04,   2.50215641e+05,   5.44426836e+04,
        3.50470719e+05,   8.63047734e+04,   5.40034219e+04,   6.77794688e+04,
        3.68365312e+05,   2.24794297e+04,   8.09291406e+03,   9.45957812e+04,
        1.55318275e+06,   4.48251133e+04,   1.95881660e+04,   9.39446094e+04,
        3.11676969e+05,   1.67561203e+05,   5.49192070e+04,   7.67687266e+04,
        3.23976675e+06,   3.89119719e+05,   4.12522891e+04,   1.01340225e+04,
        8.52935781e+04,   1.06760576e+04,   1.84703281e+04,   1.80368062e+05,
        4.37343562e+05,   9.12017266e+04,   2.72335844e+05,   1.37882000e+05,
        1.34477000e+06,   6.41523594e+04,   3.13926562e+03,   4.33596289e+03,
        2.64272531e+05,   7.80209062e+04,   5.01549961e+04,   2.85628672e+04,
        2.45298594e+05,   3.27757148e+04,   4.02491328e+04,   3.41838672e+04,
        9.77658250e+05,   7.92722188e+04,   1.09787031e+05,   4.58191328e+04,
        2.09133969e+05,   3.54069375e+04,   2.63370391e+04,   9.02749609e+04,
        2.66181200e+06,   4.86021531e+05,   2.54144984e+05,   4.71783711e+04,
        6.12358359e+04,   2.51382666e+03,   2.83097949e+03,   1.14230812e+05,
        2.69080062e+05,   1.51075484e+05,   4.28863938e+05,   1.23251883e+05,
        1.14274162e+06,   3.82376992e+04,   8.40801562e+03,   9.15406836e+03],
     [  1.87456141e+05,   1.06449742e+05,   1.35157031e+05,   1.87459812e+05,
        3.94740500e+05,   5.41626406e+04,   4.66865723e+03,   3.08927695e+04,
        1.41641550e+06,   2.48041047e+05,   9.68960938e+04,   1.20185859e+05,
        8.89200000e+04,   1.18749600e+04,   2.07939883e+04,   1.06934422e+05,
        4.07070500e+05,   8.17528594e+04,   7.46578750e+04,   6.74229531e+04,
        3.89930469e+05,   2.08740371e+04,   1.02750250e+05,   6.77879531e+04,
        9.82068359e+04,   7.46484688e+04,   3.83091172e+04,   4.03582227e+04,
        1.42581406e+05,   8.02963906e+04,   1.15465961e+05,   6.98499375e+04,
        1.81633938e+05,   7.44210547e+04,   1.29583359e+05,   2.73512125e+05,
        5.42401500e+05,   1.17813719e+05,   6.18654180e+04,   2.67765273e+04,
        1.76724425e+06,   2.26261812e+05,   4.87358672e+04,   7.58682344e+04,
        5.32325664e+04,   9.98774121e+03,   9.81103984e+04,   2.84074781e+05,
        6.52306312e+05,   4.07501445e+04,   4.65969844e+04,   1.21992961e+05,
        4.59589188e+05,   1.35669938e+05,   2.52022531e+05,   1.51700672e+05,
        2.64177750e+05,   8.41802578e+04,   3.90960078e+04,   5.36751562e+04,
        1.95637578e+05,   1.04868352e+05,   1.08696352e+05,   8.73333281e+04,
        1.58130250e+05,   1.34152246e+04,   4.92765781e+04,   1.77188531e+05,
        5.74225625e+05,   2.03042562e+05,   1.24984086e+05,   9.17472266e+04,
        1.83731550e+06,   2.66167875e+05,   6.93858359e+04,   1.28943867e+04,
        3.64540195e+04,   3.92917930e+04,   4.50277891e+04,   2.53945297e+05,
        6.33668062e+05,   1.40368266e+05,   1.85073719e+05,   1.43795984e+05,
        5.07444438e+05,   1.48163938e+05,   3.90886719e+04,   2.62189551e+04,
        2.74767469e+05,   1.17213281e+05,   1.21742180e+05,   4.95970039e+04,
        1.72465188e+05,   5.49766445e+04,   3.00007344e+04,   2.59160371e+04,
        1.71031484e+05,   2.45900898e+04,   1.70170020e+04,   6.63961250e+04,
        3.95339375e+05,   1.27860289e+05,   1.35862875e+05,   9.10661250e+04,
        1.40917362e+06,   1.05440781e+05,   3.64899688e+04,   6.35287158e+03,
        3.69420234e+04,   6.97990625e+04,   9.33959609e+04,   2.39556031e+05,
        3.72172312e+05,   9.16924531e+04,   1.10783000e+05,   3.89356289e+04,
        3.91739156e+05,   4.88151719e+04,   8.99830156e+04,   3.70401875e+04,
        1.40985000e+05,   4.08515273e+04,   1.15098086e+05,   6.05001211e+04,
        1.17583484e+05,   2.55993066e+04,   8.49289844e+04,   3.87769297e+04]]

class TestFisherVector(TestCase):
    global x,y,z
    def _setup(self):
        gmm = Gmm(K=5)
        gmm.load(folder=data_folder_in_mrjob)
        return FisherVector(gmm)


    def assertListAlmostEqual(self, list1, list2, tol):
        self.assertEqual(len(list1), len(list2))
        for a, b in zip(list1, list2):
            self.assertAlmostEqual(a[0], b[0], tol)


    def test_likelihood_statistics(self):
        fv = self._setup()
        from aesthetics.fisher import Descriptors
        descriptors = Descriptors()
        import cv2
        img = cv2.imread(filename)
        img = cv2.resize(img, (500, 500))
        img_descriptors = descriptors.image(img)
        x1, y1, z1 = fv._likelihood_statistics(img_descriptors)
        self.assertListAlmostEqual(x1.tolist(), x, 3)
        self.assertListAlmostEqual(y1.tolist(), y, 3)
        self.assertListAlmostEqual(z1.tolist(), z, 3)